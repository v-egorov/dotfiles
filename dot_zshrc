# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
# test -d /home/vegorov && export ZSH="/home/vegorov/.oh-my-zsh"
# test -d /Users/vegorov && export ZSH="/Users/vegorov/.oh-my-zsh"
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
# ZSH_THEME="agnoster"
ZSH_THEME="powerlevel10k/powerlevel10k"
POWERLEVEL9K_MODE='nerdfont-complete'
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir dir_writable vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status kubecontext time)
POWERLEVEL9K_PROMPT_ON_NEWLINE=true


# ZSH_THEME="random"
# ZSH_THEME="amuse"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Homewbrew auto-completion per docs @ https://docs.brew.sh/Shell-Completion
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH

  autoload -Uz compinit
  compinit
fi

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  git-prompt
  brew
  vagrant
  wp-cli
  history-substring-search
  docker
  golang
  kubectl
  ssh-agent
  zsh-syntax-highlighting
  fzf
  zsh-autosuggestions
  fzf-tab
)

# See ssh-agent docs at following URL:
# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/ssh-agent
zstyle :omz:plugins:ssh-agent lazy yes

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Test for nvim presence and set search PATH if it is found
# Installation path as per https://github.com/neovim/neovim/blob/master/INSTALL.md#linux instructions
# for pre-built binaries for Linux - recommended path is /opt/nvim-linux64/bin/nvim
if [ -f /opt/nvim-linux64/bin/nvim ]; then
  export PATH=$PATH:/opt/nvim-linux64/bin
fi

# Preferred editor
if type nvim &>/dev/null; then
  export EDITOR='nvim'
  # Subsitute vim with nvim
  alias vim='nvim'
else
  export EDITOR='vim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
#

# Point Vagrant to home_ext if it exists
test -d /mnt/sda/home_ext/vegorov/.vagrant.d && export VAGRANT_HOME=/mnt/sda/home_ext/vegorov/.vagrant.d


# Add brew to the PATH (Linux)
test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)

# Add brew to the PATH (Mac OS X)
test -f /usr/local/bin/brew && eval $(/usr/local/bin/brew shellenv)


# Add snaps to the PATH
test -d /snap/bin && export PATH=/snap/bin:$PATH

# Add ~/.local/bin/ to the PATH if it exists
test -d ~/.local/bin && export PATH=~/.local/bin:$PATH

if type brew &>/dev/null; then
  # Trellis CLI Virtualenv intergarion per https://github.com/roots/trellis-cli#virtualenv
  test -f $(brew --prefix)/bin/trellis && eval "$(trellis shell-init zsh)"

  if [ -f $(brew --prefix)/bin/trellis ]; then
    # echo "Trellis exists"
    complete -o nospace -C $(brew --prefix)/bin/trellis trellis
  fi
fi

# Added automatically via trellis --autocomplete-install - see https://github.com/roots/trellis-cli#autocompletes
autoload -U +X bashcompinit && bashcompinit
# test -f $(brew --prefix)/bin/trellis && eval "$(complete -o nospace -C /home/linuxbrew/.linuxbrew/bin/trellis trellis)"

if [ -f /usr/local/go/bin/go ]; then
  export PATH=$PATH:/usr/local/go/bin
fi

# Add GOPATH env variable
if type go &>/dev/null; then
  export GOPATH=$HOME/go
  export PATH=$PATH:$(go env GOPATH)/bin
  export GOPROXY=http://nexus.vegorov.ru/repository/go-proxy/
fi

# Add Red Hat CodeReady Containers (crc) to the PATH
test -d /mnt/sda/OpenShift/bin && export PATH=/mnt/sda/OpenShift/bin:$PATH

# Add Red Hat CodeReady Containers (crc) autocompletion
if type crc &>/dev/null; then
  crc completion zsh > "${fpath[1]}/_crc"
fi

# The next line updates PATH for Yandex Cloud CLI.
if [ -f "$HOME/yandex-cloud/path.bash.inc" ]; then source "$HOME/yandex-cloud/path.bash.inc"; fi

# The next line enables shell command completion for yc.
if [ -f "$HOME/yandex-cloud/completion.zsh.inc" ]; then source "$HOME/yandex-cloud/completion.zsh.inc"; fi

# log4j CVE-2021-44228 mitigation
export LOG4J_FORMAT_MSG_NO_LOOKUPS=true

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#if [ -f $(brew --prefix)/bin/trellis ]; then
  # echo "Trellis exists"
#  complete -o nospace -C $(brew --prefix)/bin/trellis trellis
#fi

# The next line updates PATH for Yandex Cloud YDB CLI.
if [ -f "$HOME/ydb/path.bash.inc" ]; then source "$HOME/ydb/path.bash.inc"; fi

# Terraform auto-completion. TODO - version hard-coded
if type terraform &>/dev/null; then
  complete -o nospace -C /home/linuxbrew/.linuxbrew/Cellar/terraform/1.2.7/bin/terraform terraform
fi

# Add Terraform autocompletion - not working
# if type terraform &>/dev/null; then
#   complete -o nospace -C $(brew --prefix)/terraform terraform
# fi

# Fuzzy find
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# LazyVim - check for presence of lazyvim config, and if it exists -
# set and export NVIM_APPNAME env variable
test -d ~/.config/lazyvim && export NVIM_APPNAME=lazyvim

# Added by nvm installation script per 
# https://github.com/nvm-sh/nvm?tab=readme-ov-file#install--update-script
# Then run `nvm install lts/*` to install nvm-managed npm LTS version
# npm, in turn, is required by mason NeoVim package manger for some LSP servers,
# for example - bash and yaml
[ -s "$HOME/.nvm" ] && export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# chezmoi autocompletion
[ -f ~/.local/share/chezmoi_completion.zsh ] && source ~/.local/share/chezmoi_completion.zsh
